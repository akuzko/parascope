#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "zen/query"

require "ostruct"

class Query < Zen::Query
  raise_on_guard_violation(false)

  alias_subject_name(:scope)

  subject { OpenStruct.new }

  defaults { { time: Time.now, barbak: "barbak" } }

  query_by :foo do |foo|
    guard('wrong value for :foo param. try "foo"') { foo == "foo" }

    scope.tap { scope.foo = foo }
  end

  query_by bar: "bar" do
    scope.tap { scope.bar = "bar" }
  end

  sift_by baz: "baz" do |baz|
    defaults { { bakbar: "bakbar" } }

    guard { upcase(baz) == "BAZ" }

    query { scope.tap { scope.baz = "baz" } }

    query_by :bak do |bak|
      scope.tap { scope.bak = bak }
    end

    query_by :barbak do |barbak|
      scope.tap { scope.barbak = barbak }
    end

    sift_by :nested_baz do |nested_baz|
      query_by :bakbar do |bakbar|
        scope.tap { scope.bakbar = [baz, nested_baz, bakbar].join("-") }
      end
    end
  end

  sift_by :other_baz do |other|
    query { scope.tap { scope.other_baz = other } }
  end

  query(if: :condition?) { scope.tap { scope.by_instance_condition = true } }
  query(unless: :bad_condition?) { scope.tap { scope.not_bad_condition = true } }

  def condition?
    !!params[:condition]
  end

  def bad_condition?
    !condition?
  end

  def upcase(str)
    str.upcase
  end
end

# q = Query.new(params: { foo: "foo", bar: "bar", baz: "baz", bak: "bak", nested_baz: "nb", other_baz: "ob" })

require "pry"
Pry.start
